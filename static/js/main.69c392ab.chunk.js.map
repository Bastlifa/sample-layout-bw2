{"version":3,"sources":["components/TabNav/TabNav.jsx","components/Unit/Unit.jsx","components/Units/Units.jsx","components/Login/Login.jsx","components/AddUnit/AddUnit.jsx","components/AppRouter/AppRouter.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","react_router_dom","Object","assign","exact","activeClassName","panes","menuItem","Menu","Item","key","as","to","content","TabNav","Tab","renderActiveOnly","Unit","unit","Card","Content","Header","address","Meta","price","Description","concat","bedrooms","unitType","extra","occupancyPercentage","Units","aUnits","className","map","index","components_Unit_Unit","Login","onSubmit","event","preventDefault","console","log","type","AddUnit","AppRouter","_useState","useState","_useState2","slicedToArray","react_router","path","render","components_Units_Units","components_AddUnit_AddUnit","component","App","components_TabNav_TabNav","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69c392ab.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Tab, Menu } from 'semantic-ui-react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Nav = props =>\r\n{\r\n    return (\r\n        <NavLink\r\n            exact\r\n            {...props}\r\n            activeClassName=\"active\"\r\n        />\r\n    )\r\n}\r\n\r\nconst panes = [\r\n    { menuItem: <Menu.Item key='Login' as={Nav} to={`/`} content={<span>Login</span>} /> },\r\n    { menuItem: <Menu.Item key='Units' as={Nav} to={`/units`} content={<span>Units</span>} /> },\r\n\t{ menuItem: <Menu.Item key='AddUnit' as={Nav} to={`/add-unit`} content={<span>Add Unit</span>} /> },\r\n]\r\n\r\nconst TabNav = () => <Tab panes={panes} renderActiveOnly={false} />\r\n\r\nexport default TabNav\r\n","import React from 'react'\r\nimport { Card } from 'semantic-ui-react'\r\nconst Unit = (props) =>\r\n{\r\n    const {unit} = props\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Content>\r\n            <Card.Header>{unit.address}</Card.Header>\r\n            <Card.Meta>{unit.price}</Card.Meta>\r\n            <Card.Description>{`${unit.bedrooms} bedroom ${unit.unitType}`}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <span>{unit.occupancyPercentage}% occupancy</span>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Unit","import React from 'react'\r\nimport Unit from '../Unit/Unit'\r\nconst Units = (props) =>\r\n{\r\n    const {aUnits} = props\r\n    return (\r\n        <div className=\"units\">\r\n            {aUnits.map((unit, index) =>\r\n                <Unit unit={unit} key={index} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Units","import React from 'react'\r\n\r\nconst Login = (props) =>\r\n{\r\n\r\n    const handleSubmit = event =>\r\n    {\r\n        event.preventDefault();\r\n        console.log(\"submit!\")\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <fieldset>\r\n                <legend>Login</legend>\r\n                <label>\r\n                    {`Username:`}\r\n                    <br/>\r\n                    <input type=\"text\"/>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    {`Password:`}\r\n                    <br/>\r\n                    <input type=\"password\"/>\r\n                </label>\r\n                <br/>\r\n                <input type=\"submit\"/>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react'\r\n\r\nconst AddUnit = (props) =>\r\n{\r\n\r\n    const handleSubmit = event =>\r\n    {\r\n        event.preventDefault();\r\n        console.log(\"submit addUnit!\")\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <fieldset>\r\n                <legend>Add Unit</legend>\r\n                <label>\r\n                    {`Addresss:`}\r\n                    <br/>\r\n                    <input type=\"text\"/>\r\n                </label>\r\n                <br/>\r\n                <label>\r\n                    {`Unit Type (house, apt, etc):`}\r\n                    <br/>\r\n                    <input type=\"text\"/>\r\n                </label>\r\n                <br/>\r\n                <input type=\"submit\"/>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddUnit","import React, {useState} from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Units from '../Units/Units'\r\nimport Login from '../Login/Login';\r\nimport AddUnit from '../AddUnit/AddUnit';\r\n\r\n\r\nexport default function AppRouter() {\r\n\r\n    const [aUnits, setAUnits] = useState([\r\n        {address: \"123 fake st\", bedrooms: 2, price: \"$50\", occupancyPercentage: \"20\", unitType: \"Apt\"},\r\n        {address: \"125 fake st\", bedrooms: 1, price: \"$500\", occupancyPercentage: \"0\", unitType: \"Apt\"},\r\n        {address: \"123 Anon Rd\", bedrooms: 7, price: \"$80\", occupancyPercentage: \"100\", unitType: \"House\"},\r\n        {address: \"6 Knockturn Alley\", bedrooms: 1, price: \"$12\", occupancyPercentage: \"45\", unitType: \"Hovel\"}\r\n    ])\r\n\r\n    return (\r\n        <div className=\"page-view ui bottom attached segment active tab\">\r\n            <Switch>\r\n                <Route path='/units' render={props =>  \r\n                <Units\r\n                    {...props} \r\n                    aUnits={aUnits}\r\n                />\r\n                } />\r\n                <Route path=\"/add-unit\" render={props =>  \r\n                <AddUnit \r\n                    {...props} \r\n                />\r\n                } />\r\n                <Route component={Login} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\n\nimport TabNav from './components/TabNav/TabNav';\nimport AppRouter from './components/AppRouter/AppRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TabNav/>\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}